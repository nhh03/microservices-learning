---
version: '3.7'
services:
  nginx:
    image: nginx:1.25.3
    restart: unless-stopped
    volumes:
      - ./nginx/templates:/etc/nginx/templates
      - ./nginx/configuration/custom_proxy_settings.conf:/etc/nginx/conf.d/custom_proxy_settings.conf
    ports:
      - "80:80"
    networks:
      - yas-network

  #  product:
  #    build: ./product-service
  #    image: ghcr.io/nashtech-garage/yas-product:latest
  #    environment:
  #        SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/productservice?useSSL=false&useUnicode=yes&characterEncoding=UTF-8&serverTimezone=UTC&createDatabaseIfNotExist=true
  #        SPRING_DATASOURCE_USERNAME: root
  #        SPRING_DATASOURCE_PASSWORD: root

  zipkin:
    image: openzipkin/zipkin:latest
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - yas-network
  identity:
    image: quay.io/keycloak/keycloak:21.0.2
    command: [ 'start-dev', '--import-realm' ]
    restart: on-failure
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_PROXY: passthrough
      KC_DB: mysql
      KC_DB_URL: jdbc:mysql://mysqlcontainer:3306/keycloak
      KC_DB_USERNAME: root
      KC_DB_PASSWORD: root
      KC_HTTP_PORT: 80
    ports:
      - "81:80"
    volumes:
      - ./identity/realm-export.json:/opt/keycloak/data/import/realm-export.json
      - ./identity/themes/yas/theme:/opt/keycloak/themes
    networks:
      - yas-network
  swagger-ui:
    image: swaggerapi/swagger-ui:v4.16.0
    environment:
      - BASE_URL=/swagger-ui
      - URLS
      - OAUTH_CLIENT_ID=swagger-ui
      - OAUTH_USE_PKCE=true
    networks:
      - yas-network
  mysqlcontainer:
    image: mysql:latest
    restart: always
    container_name: mysqlcontainer
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: root
      MYSQL_PASSWORD: root
    volumes:
      - microservice-ecorrmmer_mysql_db1:/var/lib/mysql
    networks:
      - yas-network
  phpmyadmin:
    image: phpmyadmin
    restart: always
    ports:
      - "8888:80"
    environment:
      - PMA_ARBITRARY=1
    networks:
      - yas-network
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    restart: always
    ports:
      - '2181:2181'
      - '2888:2888'
      - '3888:3888'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - yas-network
  kafka:
    image: confluentinc/cp-kafka:7.0.1
    hostname: ${KAFKA_SERVICE_HOST}
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      - KAFKA_BROKER_ID
      - KAFKA_ZOOKEEPER_CONNECT
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
      - KAFKA_ADVERTISED_LISTENERS
      - KAFKA_INTER_BROKER_LISTENER_NAME
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
    networks:
      - yas-network
  kafka-connect:
    image: debezium/connect:2.2
    restart: always
    ports:
      - '8093:8093'
      - '5005:5005'
    depends_on:
      - kafka
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=kafka_connect_configs
      - OFFSET_STORAGE_TOPIC=kafka_connect_offsets
    networks:
      - yas-network
  akhq:
    image: tchiotludo/akhq:0.24.0
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: 'kafka:9092'
              connect:
                - name: "kafka-connect"
                  url: "http://kafka-connect:8093/"
    ports:
      - '8089:8080'
    depends_on:
      - kafka
      - kafka-connect
    networks:
      - yas-network
volumes:
  microservice-ecorrmmer_mysql_db1:
    external: true

networks:
  yas-network:
    driver: bridge
    name: yas-network

